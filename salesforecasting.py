# -*- coding: utf-8 -*-
"""SalesForecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16M4sc5iCBpXy6LDQA8DwovU3-Dv_KIf0
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -Uq upgini catboost

from os.path import exists
import pandas as pd

df_path="train.csv.zip" if exists("train.csv.zip") else "https://github.com/upgini/upgini/raw/main/notebooks/train.csv.zip"
df=pd.read_csv(df_path)#loads the data into dataframe df
df=df.sample(n=19_000,random_state=0)#randomly selects 19000 rows from the data
df["store"]=df["store"].astype(str)
df["item"]=df["item"].astype(str)
df["date"]=pd.to_datetime(df["date"])
df.sort_values("date",inplace=True)#sorting to get the chronological order
df.reset_index(inplace=True,drop=True)#resets data frame's index after sorting
df.head()#shows first few rows

#spiltting our data set into training and testing data set,we r gonna split baed on time
#training dataset=2013-2016 testing dataset=2016-2017
train=df[df["date"]<"2017-01-01"]#put all the rows before jan 1st 2017 into train
test=df[df["date"]>="2017-01-01"]

#splitting these data sets into labels and features,feautures r input values(date,store,...),labels r what we want to predict
train_features=train.drop(columns=["sales"])
train_target=train["sales"]#sales is what we r gonna predict
test_features=test.drop(columns=["sales"])
test_target=test["sales"]

#enriching the features with upgini lib
from upgini import FeaturesEnricher,SearchKey
from upgini.metadata import CVType

enricher=FeaturesEnricher(
  search_keys={
      "date":SearchKey.DATE
  },
  cv=CVType.time_series#whatever data is upgini gonna give should be in b/n 2013 and 2017
)
#fit the enricher into our training dataset
enricher.fit(train_features,
             train_target,
             eval_set=[(test_features,test_target)])

from catboost import CatBoostRegressor
from catboost.utils import eval_metric

model=CatBoostRegressor(verbose=False,allow_writing_files=False,random_state=0)

enricher.calculate_metrics(
    train_features,train_target,
    eval_set=[(test_features,test_target)],
    estimator=model,
    scoring="mean_absolute_percentage_error"
)

enriched_train_features=enricher.transform(train_features,keep_input=True)#upgini creates new features so we just keep input is queal true so that all the existing colums r there
enriched_test_features=enricher.transform(test_features,keep_input=True)
#enriched_train_features.head()

#first we r gonna train and evaluate data set before adding the enriched features using upgini
#after ..... and we r gonna compare the error rate
model.fit(train_features,train_target)#original dataset
preds=model.predict(test_features)
eval_metric(test_target.values,preds,"SMAPE")#symmetric mean absolute percsntage error



